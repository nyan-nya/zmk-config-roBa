#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <2>;
    scroll-layers = <5>;

    arrows {
        layers = <3>;
        bindings =
            <&kp RIGHT_ARROW>,
            <&kp LEFT_ARROW>,
            <&kp UP_ARROW>,
            <&kp DOWN_ARROW>;

        tick = <50>;
        wait-ms = <100>;
        tap-ms = <100>;
    };
};

&mkp_input_listener { input-processors = <&zip_temp_layer 2 250>; };

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };
    };

    macros {
        mac_setup: osx_setup {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0 &tog 0>;
            label = "OSX_SETUP";
        };

        win_setup: win_setup {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1 &tog 0>;
            label = "WIN_SETUP";
        };

        wintab: wintab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_WIN &kp TAB>;
            label = "WINTAB";
        };

        desktopLeft: desktopLeft {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_WIN &kp LCTRL &kp LEFT>;
            label = "DESKTOPLEFT";
        };

        desktopRight: desktopRight {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_WIN &kp LCTRL &kp RIGHT>;
            label = "DESKTOPRIGHT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer_win {
            bindings = <
&kp Q           &kp W         &kp E         &kp R                 &kp T                                             &kp Y             &kp U  &kp I      &kp O    &kp P
&mt LCTRL A     &kp S         &kp D         &kp F                 &kp G        &mkp MCLK             &wintab        &kp H             &kp J  &kp K      &kp L    &kp MINUS
&kp Z           &kp X         &kp C         &kp V                 &lt 4 B      &kp TAB               &lt 4 SLASH    &kp N             &kp M  &kp COMMA  &kp DOT  &kp EQUAL
&kp LEFT_SHIFT  &kp LEFT_ALT  &kp LEFT_GUI  &mt LCTRL LANGUAGE_2  &lt 3 SPACE  &lt 5 INT_HENKAN      &kp BACKSPACE  &lt 2 LANGUAGE_1                             &kp ENTER
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        cursor {
            bindings = <
&kp ESCAPE  &trans              &trans            &trans         &trans                            &trans  &trans     &mkp MCLK       &trans     &none
&trans      &trans              &kp LC(UP_ARROW)  &trans         &trans  &trans            &trans  &trans  &mkp LCLK  &kp UP_ARROW    &mkp RCLK  &mkp MB5
&trans      &kp LC(LEFT_ARROW)  &kp LC(DOWN)      &kp LC(RIGHT)  &trans  &kp CAPSLOCK      &trans  &trans  &kp LEFT   &kp DOWN_ARROW  &kp RIGHT  &mkp MB4
&trans      &trans              &trans            &trans         &trans  &trans            &trans  &trans                                        &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        number {
            bindings = <
&kp ESCAPE  &kp F7  &kp F8  &kp F9          &kp F10                            &none          &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &trans
&none       &kp F4  &kp F5  &kp F6          &kp F11  &none       &trans        &none          &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &mkp MB5
&none       &kp F1  &kp F2  &kp F3          &kp F12  &none       &trans        &kp NUMBER_0   &kp N1        &kp NUMBER_2  &kp NUMBER_3  &mkp MB4
&trans      &none   &trans  &kp LANGUAGE_1  &trans   &trans      &desktopLeft  &desktopRight                                            &trans
            >;
        };

        bluetooth {
            bindings = <
&trans  &trans  &trans  &trans  &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &mac_setup    &win_setup    &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };

        symbol {
            bindings = <
&trans  &kp AMPERSAND  &kp STAR     &kp GRAVE  &kp BACKSLASH                      &trans  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans  &trans
&trans  &kp DOLLAR     &kp PERCENT  &kp CARET  &kp PIPE       &trans      &trans  &trans  &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans  &trans
&trans  &kp EXCL       &kp AT       &kp HASH   &trans         &trans      &trans  &trans  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans  &trans
&trans  &trans         &trans       &trans     &trans         &trans      &trans  &trans                                                       &trans
            >;
        };
    };
};
